#+TITLE: Emacs settings

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore (this)
:END:
:CONTENTS:
- [[#startup-performance][Startup Performance]]
- [[#package-management][Package Management]]
- [[#keep-emacsd-clean][Keep .emacs.d Clean]]
- [[#default-coding-system][Default Coding System]]
- [[#keychain-environment---project-homepage][keychain-environment - Project Homepage]]
- [[#direnv-support][Direnv support]]
- [[#undo-tree][Undo tree]]
- [[#keybinding-panel-which-key][Keybinding Panel (which-key)]]
- [[#general-configuration][General Configuration]]
  - [[#user-interface][User Interface]]
  - [[#theme][Theme]]
  - [[#font][Font]]
  - [[#emojis-in-buffers][Emojis in buffers]]
- [[#mode-line][Mode Line]]
  - [[#basic-customization][Basic Customization]]
  - [[#enable-mode-diminishing][Enable Mode Diminishing]]
  - [[#doom-modeline][Doom Modeline]]
- [[#notifications][Notifications]]
- [[#auto-saving-changed-files][Auto-Saving Changed Files]]
- [[#auto-reverting-changed-files][Auto-Reverting Changed Files]]
- [[#highlight-matching-braces][Highlight Matching Braces]]
- [[#frame-scaling--zooming][Frame Scaling / Zooming]]
- [[#displaying-world-time][Displaying World Time]]
- [[#editing-configuration][Editing Configuration]]
  - [[#fill-column][Fill Column]]
  - [[#tab-widths][Tab Widths]]
  - [[#use-spaces-instead-of-tabs-for-indentation][Use spaces instead of tabs for indentation]]
  - [[#use-tab-for-indenting][Use tab for indenting]]
  - [[#commenting-lines][Commenting Lines]]
  - [[#box-quote][Box Quote]]
  - [[#improve-rectangle-selections-using-cua-base][Improve rectangle selections using cua-base]]
  - [[#move-textregion-updown][Move text/region up/down]]
  - [[#automatically-clean-whitespace][Automatically clean whitespace]]
  - [[#use-parinfer-for-lispy-languages][Use Parinfer for Lispy languages]]
  - [[#origamiel-for-folding][Origami.el for Folding]]
  - [[#set-margins-for-modes][Set Margins for Modes]]
  - [[#smarter-navigation-to-the-beginning-of-a-line---reference][Smarter navigation to the beginning of a line - Reference]]
  - [[#avoids-saving-active-regions-to-the-primary-selection][Avoids saving active regions to the primary selection]]
- [[#stateful-keymaps-with-hydra][Stateful Keymaps with Hydra]]
- [[#completion-system][Completion System]]
  - [[#preserve-minibuffer-history-with-savehist-mode][Preserve Minibuffer History with savehist-mode]]
  - [[#completions-with-vertico][Completions with Vertico]]
  - [[#completions-in-regions-with-corfu][Completions in Regions with Corfu]]
  - [[#improved-candidate-filtering-with-orderless][Improved Candidate Filtering with Orderless]]
  - [[#consult-commands][Consult Commands]]
  - [[#switching-directories-with-consult-dir][Switching Directories with consult-dir]]
  - [[#completion-annotations-with-marginalia][Completion Annotations with Marginalia]]
  - [[#completion-actions-with-embark][Completion Actions with Embark]]
- [[#expand-region][Expand Region]]
- [[#dired][Dired]]
- [[#org-mode][Org Mode]]
  - [[#org-configuration][Org Configuration]]
    - [[#export-engines][Export engines]]
  - [[#fonts-and-bullets][Fonts and Bullets]]
  - [[#block-templates][Block Templates]]
  - [[#update-table-of-contents-on-save][Update Table of Contents on Save]]
  - [[#asynchronous-src_block-execution-for-org-babel][Asynchronous src_block execution for org-babel]]
  - [[#presentations][Presentations]]
  - [[#auto-show-markup-symbols][Auto-show Markup Symbols]]
- [[#development][Development]]
  - [[#git][Git]]
    - [[#magit---its-magit-a-git-porcelain-inside-emacs][Magit - It's Magit! A Git porcelain inside Emacs]]
      - [[#show-todo-items-in-current-changing-files][Show TODO items in current changing files]]
    - [[#diff-hl---emacs-package-for-highlighting-uncommitted-changes][diff-hl - Emacs package for highlighting uncommitted changes]]
    - [[#create-urls-for-files-and-commits-in-githubbitbucketgitlab-repositories][Create URLs for files and commits in GitHub/Bitbucket/GitLab/... repositories]]
  - [[#yafolding---yet-another-folding-extension-for-emacs][Yafolding - Yet another folding extension for Emacs]]
  - [[#wgrep---writable-grep-buffer-and-apply-the-changes-to-files][wgrep - Writable grep buffer and apply the changes to files]]
  - [[#mmm][MMM]]
  - [[#projectile][Projectile]]
  - [[#languages][Languages]]
    - [[#language-server-support][Language Server Support]]
    - [[#debug-adapter-support][Debug Adapter Support]]
    - [[#bitbake][BitBake]]
      - [[#references][References]]
    - [[#cc][C/C++]]
    - [[#device-tree][Device Tree]]
    - [[#dockerfile][Dockerfile]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#go][Go]]
    - [[#html][HTML]]
    - [[#json][JSON]]
    - [[#markdown][Markdown]]
    - [[#nix][Nix]]
    - [[#python][Python]]
    - [[#qt][Qt]]
    - [[#rust][Rust]]
    - [[#systemd][SystemD]]
    - [[#terraform][Terraform]]
    - [[#toml][TOML]]
    - [[#typescript-and-javascript][TypeScript and JavaScript]]
    - [[#yaml][YAML]]
    - [[#zig][Zig]]
  - [[#productivity][Productivity]]
    - [[#syntax-checking-with-flycheck][Syntax checking with Flycheck]]
    - [[#snippets][Snippets]]
    - [[#smart-parens][Smart Parens]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#rainbow-mode][Rainbow Mode]]
    - [[#string-inflection][String Inflection]]
    - [[#tramp][TRAMP]]
      - [[#docker-support][Docker support]]
    - [[#browse-kill-ring][Browse Kill Ring]]
    - [[#highlight-symbol][Highlight Symbol]]
    - [[#spelling][Spelling]]
    - [[#allow-answering-y-or-n-for-yes--or-no-questions][Allow answering y or n for yes  or no questions]]
    - [[#dont-confirm-to-kill-emacs][Don't confirm to kill Emacs]]
- [[#runtime-performance][Runtime Performance]]
- [[#extra-functions][Extra Functions]]
- [[#inspiration][Inspiration]]
:END:

* Startup Performance

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time. Also, turn on =lexical-binding= for the init file!

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t; -*-

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

* Package Management

Set up ELPA, MELPA, and Org package repositories and load =use-package= to manage package configuration.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("onpa" . "https://olanilsson.bitbucket.io/packages/")))

  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

  (package-initialize)
  ;; (unless package-archive-contents
  ;;   (package-refresh-contents))

  (require 'use-package)

  ;; Uncomment this to get a reading on packages that get loaded at startup
  ;;(setq use-package-verbose t)

  ;; "ensure" packages by default
  (setq use-package-always-ensure t)

#+end_src

* Keep .emacs.d Clean

I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.

#+begin_src emacs-lisp

  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)

  ;; Keep customization settings in a temporary file (thanks Ambrevar!)
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)

#+end_src

* Default Coding System

Set the coding system the default to UTF-8.

#+begin_src emacs-lisp

  (set-default-coding-systems 'utf-8)

#+end_src

* keychain-environment - [[https://github.com/tarsius/keychain-environment][Project Homepage]]

Allow loading the ~keychain~ environment variables so we can use the SSH and GNU GPG keys inside the Emacs. To load the environment variables, we can call ~keychain-refresh-environment~.

#+begin_src emacs-lisp
  (use-package keychain-environment
    :init
    (keychain-refresh-environment))
#+end_src

* Direnv support

#+begin_src emacs-lisp

  (use-package direnv
    :config (direnv-mode))

#+end_src

* Undo tree

The [[https://elpa.gnu.org/packages/undo-tree.html][undo-tree]] provided by this package replaces Emacs' undo system with a system that treats undo history as what it is: a branching tree of changes. This simple idea allows the more intuitive behavior of the standard undo/redo system to be combined with the power of never losing any history.

#+begin_src emacs-lisp

  (use-package undo-tree
    :diminish undo-tree-mode
    :bind ("C-x u" . 'undo-tree-redo)
    :config
    (progn
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)
      (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
      (global-undo-tree-mode)))

#+end_src

* Keybinding Panel (which-key)

[[https://github.com/justbur/emacs-which-key][which-key]] is great for getting an overview of what keybindings are available based on the prefix keys you entered.  Learned about this one from Spacemacs.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

* General Configuration

** User Interface

Clean up Emacs' user interface, make it more minimal.

#+begin_src emacs-lisp

  ;; Thanks, but no thanks
  (setq inhibit-startup-message t)
  (setq inhibit-startup-buffer-menu t)

  (scroll-bar-mode -1) ;; Disable visible scrollbar
  (tool-bar-mode -1)   ;; Disable the toolbar
  (tooltip-mode -1)    ;; Disable tooltips
  (set-fringe-mode 10) ;; Give some breathing room

  (menu-bar-mode -1)   ;; Disable the menu bar

  ;; Avoid resizing the frames automatically
  (setq frame-inhibit-implied-resize t)

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; Use horizontal bar, blinking, cursor
  (blink-cursor-mode t)
  (setq-default cursor-type 'hbar)

  ;; Enable highlight of current line
  (hl-line-mode)

#+end_src

Improve scrolling.

#+begin_src emacs-lisp

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil)            ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't)                  ;; scroll window under mouse
  (setq scroll-step 1)                                ;; keyboard scroll one line at a time
  (setq use-dialog-box nil)                           ;; Disable dialog boxes since they weren't working in Mac OSX

#+end_src

Set frame transparency and maximize windows by default.

#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

Enable line numbers and customize their format.

#+begin_src emacs-lisp

  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook
                  git-commit-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

Don't warn for large files (shows up when launching videos)

#+begin_src emacs-lisp

  (setq large-file-warning-threshold nil)

#+end_src

Don't warn for following symlinked files

#+begin_src emacs-lisp

  (setq vc-follow-symlinks t)

#+end_src

Don't warn when advice is added for functions

#+begin_src emacs-lisp

  (setq ad-redefinition-action 'accept)

#+end_src

** Theme

These days I bounce around between themes included with [[https://github.com/hlissner/emacs-doom-themes][DOOM Themes]] since they're well-designed and integrate with a lot of Emacs packages.

A nice gallery of Emacs themes can be found at https://emacsthemes.com/.

Alternate themes:

- =doom-snazzy=
- =doom-vibrant=
- =doom-palenight=

#+begin_src emacs-lisp

  (use-package doom-themes :defer t)

  (load-theme 'doom-material-dark t)
  (doom-themes-visual-bell-config)

#+end_src

** Font

Different platforms need different default font sizes, and [[https://mozilla.github.io/Fira/][Fira Mono]] is currently my favorite face.

#+begin_src emacs-lisp

  (defun os/new-frame-set-font (frame)
    ""
    (with-selected-frame frame
      ;; Set the font face based on platform
      (set-face-attribute 'default frame
                          :font "JetBrains Mono"
                          :weight 'light
                          :height 110)

      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch frame
                          :font "JetBrains Mono"
                          :weight 'light
                          :height 100)

      ;; Set the variable pitch face
      (set-face-attribute 'variable-pitch frame
                          ;; :font "Cantarell"
                          :font "Iosevka"
                          :height 125
                          :weight 'light)))

  ;; Set fonts on new frames
  (add-hook 'after-make-frame-functions 'os/new-frame-set-font)

#+end_src

** Emojis in buffers

#+begin_src emacs-lisp

  (use-package emojify
    :hook (erc-mode . emojify-mode)
    :commands emojify-mode)

#+end_src

* Mode Line

** Basic Customization

#+begin_src emacs-lisp

  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)

#+end_src

** Enable Mode Diminishing

The [[https://github.com/myrjola/diminish.el][diminish]] package hides pesky minor modes from the modelines.

#+begin_src emacs-lisp

  (use-package diminish)

#+end_src

** Doom Modeline

#+begin_src emacs-lisp

  ;; You must run (all-the-icons-install-fonts) one time after
  ;; installing this package!

  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc t)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))

#+end_src

* Notifications

[[https://github.com/jwiegley/alert][alert]] is a great library for showing notifications from other packages in a variety of ways.  For now I just use it to surface desktop notifications from package code.

#+begin_src emacs-lisp

  (use-package alert
    :commands alert
    :config
    (setq alert-default-style 'notifications))

#+end_src

* Auto-Saving Changed Files

#+begin_src emacs-lisp

    (use-package super-save
      :defer 1
      :diminish super-save-mode
      :config
      (super-save-mode +1)
      (setq super-save-auto-save-when-idle t))

#+end_src

* Auto-Reverting Changed Files

#+begin_src emacs-lisp

  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)

#+end_src

* Highlight Matching Braces

#+begin_src emacs-lisp

  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))

#+end_src

* Frame Scaling / Zooming

The keybindings for this are =C+M+-= and =C+M+==.

#+begin_src emacs-lisp

  (use-package default-text-scale
    :defer 1
    :config
    (default-text-scale-mode))

#+end_src

* Displaying World Time

=display-time-world= command provides a nice display of the time at a specified list of timezones.  Nice for working in a team with remote members.

#+begin_src emacs-lisp

  (setq display-time-world-list
        '(("Etc/UTC" "UTC")
          ("America/Los_Angeles" "Seattle")
          ("America/New_York" "New York")
          ("Europe/Athens" "Athens")
          ("Pacific/Auckland" "Auckland")
          ("Asia/Shanghai" "Shanghai")
          ("Asia/Kolkata" "Hyderabad")))
  (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")

#+end_src

* Editing Configuration

** Fill Column

Default the fill to 100 columns as this seems as most accepted standard up to now.

#+begin_src emacs-lisp

  (setq-default fill-column 100)

#+end_src

We also provide these two utilities to "unfill" a paragraph or region.

#+begin_src emacs-lisp

  (defun unfill-paragraph ()
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))

  (defun unfill-region ()
    (interactive)
    (let ((fill-column (point-max)))
      (fill-region (region-beginning) (region-end) nil)))

#+end_src

** Tab Widths

Default to an indentation size of 4 spaces since it's the norm for pretty much every language I use.

#+begin_src emacs-lisp

  (setq-default tab-width 4)

#+end_src

** Use spaces instead of tabs for indentation

#+begin_src emacs-lisp

  (setq-default indent-tabs-mode nil)

#+end_src

** Use tab for indenting

#+begin_src emacs-lisp

  ;; First try to indent the current line, and if the line
  ;; was already indented, then try `completion-at-point'
  (setq tab-always-indent 'complete)

#+end_src

** Commenting Lines

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-;" . evilnc-comment-or-uncomment-lines))

#+end_src

** Box Quote

#+begin_src emacs-lisp

  (use-package boxquote)

#+end_src

** Improve rectangle selections using cua-base

#+begin_src emacs-lisp

  (use-package cua-base
  :diminish cua-mode
  :config (cua-mode t)
  :init
  (progn
    (setq cua-auto-tabify-rectangles nil)
    (setq cua-keep-region-after-copy nil)
    (setq cua-enable-cua-keys nil)))

#+end_src

** Move text/region up/down

#+begin_src emacs-lisp

  (use-package move-text
  :bind (("M-<up>" . move-text-up)
         ("M-<down>" . move-text-down)))

#+end_src

** Automatically clean whitespace

#+begin_src emacs-lisp

  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (org-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))

#+end_src

** Use Parinfer for Lispy languages

#+begin_src emacs-lisp

  (use-package parinfer
    :disabled
    :hook ((clojure-mode . parinfer-mode)
           (emacs-lisp-mode . parinfer-mode)
           (common-lisp-mode . parinfer-mode)
           (scheme-mode . parinfer-mode)
           (lisp-mode . parinfer-mode))
    :config
    (setq parinfer-extensions
          '(defaults       ; should be included.
             pretty-parens  ; different paren styles for different modes.
             smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
             smart-yank)))  ; Yank behavior depend on mode.

#+end_src

** Origami.el for Folding

#+begin_src emacs-lisp

  (use-package origami
    :hook (yaml-mode . origami-mode))

#+end_src

** Set Margins for Modes

#+begin_src emacs-lisp

  ;; (defun os/center-buffer-with-margins ()
  ;;   (let ((margin-size (/ (- (frame-width) 80) 3)))
  ;;     (set-window-margins nil margin-size margin-size)))

  (defun os/org-mode-visual-fill ()
    (setq visual-fill-column-width 110
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . os/org-mode-visual-fill))

#+end_src

** Smarter navigation to the beginning of a line - [[https://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][Reference]]

#+begin_src emacs-lisp

  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)

#+end_src

** Avoids saving active regions to the primary selection

#+begin_src emacs-lisp

  (setq select-active-regions nil)

#+end_src

* Stateful Keymaps with Hydra

#+begin_src emacs-lisp

  (use-package hydra
    :defer 1)

#+end_src

* Completion System

** Preserve Minibuffer History with savehist-mode

#+begin_src emacs-lisp

  (use-package savehist
    :config
    (setq history-length 25)
    (savehist-mode 1))

  ;; Individual history elements can be configured separately
  ;;(put 'minibuffer-history 'history-length 25)
  ;;(put 'evil-ex-history 'history-length 50)
  ;;(put 'kill-ring 'history-length 25))

#+end_src

** Completions with Vertico

#+begin_src emacs-lisp

  (defun os/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
       folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (delete-word (- arg))))

  (use-package vertico
    :bind (:map vertico-map
                ("C-n" . vertico-next)
                ("C-p" . vertico-previous)
                ("C-g" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . os/minibuffer-backward-kill)
                ("M-<backspace>" . os/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :init
    (vertico-mode))

#+end_src

** Completions in Regions with Corfu

#+begin_src emacs-lisp

  (use-package corfu
    :bind (:map corfu-map
                ("C-n" . corfu-next)
                ("C-p" . corfu-previous)
                ("C-i" . corfu-insert))
    :custom
    (corfu-cycle t)
    :init
    (global-corfu-mode))

#+end_src

** Improved Candidate Filtering with Orderless

#+begin_src emacs-lisp

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion flex))))))

#+end_src

** Consult Commands

Consult provides a lot of useful completion commands similar to Ivy's Counsel.

#+begin_src emacs-lisp

  (defun os/get-project-root ()
    (when (fboundp 'projectile-project-root)
      (projectile-project-root)))

  (use-package consult
    :demand t
    :bind (("C-s" . consult-line)
           ("C-M-l" . consult-imenu)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    :custom
    (consult-project-root-function #'os/get-project-root)
    (completion-in-region-function #'consult-completion-in-region))

#+end_src

** Switching Directories with consult-dir

#+begin_src emacs-lisp

  (use-package consult-dir
    :bind (("C-x C-d" . consult-dir)
           :map vertico-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file))
    :custom
    (consult-dir-project-list-function nil))

  ;; Thanks Karthik!
  (with-eval-after-load 'eshell-mode
    (defun eshell/z (&optional regexp)
      "Navigate to a previously visited directory in eshell."
      (let ((eshell-dirs (delete-dups (mapcar 'abbreviate-file-name
                                              (ring-elements eshell-last-dir-ring)))))
        (cond
         ((and (not regexp) (featurep 'consult-dir))
          (let* ((consult-dir--source-eshell `(:name "Eshell"
                                                     :narrow ?e
                                                     :category file
                                                     :face consult-file
                                                     :items ,eshell-dirs))
                 (consult-dir-sources (cons consult-dir--source-eshell consult-dir-sources)))
            (eshell/cd (substring-no-properties (consult-dir--pick "Switch directory: ")))))
         (t (eshell/cd (if regexp (eshell-find-previous-directory regexp)
                         (completing-read "cd: " eshell-dirs))))))))

#+end_src

** Completion Annotations with Marginalia

Marginalia provides helpful annotations for various types of minibuffer completions.  You can think of it as a replacement of =ivy-rich=.

#+begin_src emacs-lisp

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src

** Completion Actions with Embark

#+begin_src emacs-lisp

  (use-package embark
    :bind (("C-S-e" . embark-act)
           :map minibuffer-local-map
           ("C-S-e" . embark-act))
    :config

    ;; Show Embark actions via which-key
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

  (use-package embark-consult
    :after embark)

  ;; (use-package embark-consult
  ;;   :after (embark consult)
  ;;   :demand t
  ;;   :hook
  ;;   (embark-collect-mode . embark-consult-preview-minor-mode))

#+end_src

* Expand Region

This module is absolutely necessary for working inside of Emacs Lisp files, especially when trying to some parent of an expression (like a =setq=).  Makes tweaking Org agenda views much less annoying.

#+begin_src emacs-lisp

  (use-package expand-region
    :bind (("C-=" . er/expand-region)))

#+end_src

* Dired

#+begin_src emacs-lisp

  (use-package all-the-icons-dired)

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :config
    (setq dired-listing-switches "-agho --group-directories-first"
          dired-omit-files "^\\.[^.].*"
          dired-omit-verbose nil
          dired-hide-details-hide-symlink-targets nil
          delete-by-moving-to-trash t)

    (autoload 'dired-omit-mode "dired-x")

    (add-hook 'dired-load-hook
              (lambda ()
                (interactive)
                (dired-collapse)))

    (add-hook 'dired-mode-hook
              (lambda ()
                (interactive)
                (dired-omit-mode 1)
                (dired-hide-details-mode 1)
                (all-the-icons-dired-mode 1)
                (hl-line-mode 1))))

  (use-package dired-rainbow
    :defer 2
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

  (use-package dired-single
    :defer t)

  (use-package dired-ranger
    :defer t)

  (use-package dired-collapse
    :defer t)

#+end_src

* Org Mode

** Org Configuration

Set up Org Mode with a baseline configuration.  The following sections will add more things to it.

#+begin_src emacs-lisp

  ;; Turn on indentation and auto-fill mode for Org files
  (defun os/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (diminish org-indent-mode))

  (use-package org
    :defer t
    :hook (org-mode . os/org-mode-setup)
    :config
    (setq org-capture-bookmark nil
          org-cycle-separator-lines 2
          org-edit-src-content-indentation 2
          org-ellipsis " ▾"
          org-fontify-quote-and-verse-blocks t
          org-format-latex-options (plist-put org-format-latex-options :scale 2.0)
          org-hide-block-startup nil
          org-hide-emphasis-markers t
          org-src-fontify-natively t
          org-src-preserve-indentation nil
          org-src-tab-acts-natively t
          org-startup-folded 'content)

    (setq org-latex-listings 'minted
          org-latex-packages-alist '(("" "minted"))
          org-latex-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
          org-latex-minted-options '(("breaklines" "true")
                                     ("breakanywhere" "true")
                                     ("fontsize" "\\footnotesize")
                                     ("bgcolor" "white")
                                     ("obeytabs" "true")
                                     ("tabsize" "2")))

    (setq org-modules
          '(org-crypt
            org-habit
            org-bookmark
            org-eshell
            org-irc))

    (setq org-refile-targets '((nil :maxlevel . 1)
                               (org-agenda-files :maxlevel . 1)))

    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path t)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

    (setq org-hide-emphasis-markers t))

#+end_src

*** Export engines

#+begin_src emacs-lisp

  (use-package ox-gfm
    :after ox
    :config (require 'ox-gfm nil t))

#+end_src

** Fonts and Bullets

Use bullet characters instead of asterisks, plus set the header font sizes to something more palatable.  A fair amount of inspiration has been taken from [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][this blog post]].

#+begin_src emacs-lisp

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Increase the size of various headings
  (set-face-attribute 'org-document-title nil :font "Iosevka" :weight 'bold :height 1.3)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Iosevka" :weight 'medium :height (cdr face)))

  ;; Make sure org-indent face is available
  (require 'org-indent)

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;; Get rid of the background on column views
  (set-face-attribute 'org-column nil :background nil)
  (set-face-attribute 'org-column-title nil :background nil)

  ;; TODO: Others to consider
  ;; '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
  ;; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
  ;; '(org-property-value ((t (:inherit fixed-pitch))) t)
  ;; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
  ;; '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
  ;; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
  ;; '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

#+end_src

** Block Templates

These templates enable you to type things like =<el= and then hit =Tab= to expand the template.  More documentation can be found at the Org Mode [[https://orgmode.org/manual/Easy-templates.html][Easy Templates]] documentation page.

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))

#+end_src

** Update Table of Contents on Save

It's nice to have a table of contents section for long literate configuration files (like this one!)  so I use =org-make-toc= to automatically update the ToC in any header with a property named =TOC=.

#+begin_src emacs-lisp

  (use-package org-make-toc
    :defer t
    :hook (org-mode . org-make-toc-mode))

#+end_src

** Asynchronous src_block execution for org-babel

[[https://github.com/astahlman/ob-async][ob-async]] isn't tied to ~src~ blocks in a specific ~org-babel~ language. Simply add the keyword ~:async~ to the ~header-args~ of any ~org-babel~ ~src~ block and invoke ~ob-async-org-babel-execute-src-block~.

#+begin_src emacs-lisp

  (use-package ob-async
    :after org
    :config (require 'ob-async))

#+end_src

** Presentations

=org-present= is the package I use for giving presentations in Emacs.  I like it because it's simple and allows me to customize the display of it pretty easily.

#+begin_src emacs-lisp

  (defun os/org-present-prepare-slide ()
    (org-overview)
    (org-show-entry)
    (org-show-children))

  (defun os/org-present-hook ()
    (setq-local face-remapping-alist '((default (:height 1.4) variable-pitch)
                                       (header-line (:height 4.5) variable-pitch)
                                       (org-document-title (:height 1.75) org-document-title)
                                       (org-code (:height 1.25) org-code)
                                       (org-verbatim (:height 1.25) org-verbatim)
                                       (org-block (:height 1.25) org-block)
                                       (org-block-begin-line (:height 0.7) org-block)))
    (setq header-line-format " ")
    (org-appear-mode -1)
    (org-display-inline-images)
    (os/org-present-prepare-slide))

  (defun os/org-present-quit-hook ()
    (setq-local face-remapping-alist '((default variable-pitch default)))
    (setq header-line-format nil)
    (org-present-small)
    (org-remove-inline-images)
    (org-appear-mode 1))

  (defun os/org-present-prev ()
    (interactive)
    (org-present-prev)
    (os/org-present-prepare-slide))

  (defun os/org-present-next ()
    (interactive)
    (org-present-next)
    (os/org-present-prepare-slide)
    (when (fboundp 'live-crafter-add-timestamp)
      (live-crafter-add-timestamp (substring-no-properties (org-get-heading t t t t)))))

  (use-package org-present
    :bind (:map org-present-mode-keymap
                ("C-c C-n" . os/org-present-next)
                ("C-c C-p" . os/org-present-prev))
    :hook ((org-present-mode . os/org-present-hook)
           (org-present-mode-quit . os/org-present-quit-hook)))

#+end_src

** Auto-show Markup Symbols

This package makes it much easier to edit Org documents when =org-hide-emphasis-markers= is turned on.  It temporarily shows the emphasis markers around certain markup elements when you place your cursor inside of them.  No more fumbling around with ~=~ and ~*~ characters!

#+begin_src emacs-lisp

  (use-package org-appear
    :hook (org-mode . org-appear-mode))

#+end_src

* Development

Configuration for various programming languages and dev tools that I use.

** Git
*** Magit - [[https://github.com/magit/magit][It's Magit! A Git porcelain inside Emacs]]

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-c g" . magit-file-dispatch))
    :config
    (require 'git-commit)
    (add-hook 'git-commit-mode-hook 'flyspell-mode)
    (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)
    (add-hook 'git-commit-mode-hook (lambda () (setq fill-column 72)))
    (setq magit-diff-refine-hunk t)
    (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge
    :after magit)
#+end_src

**** Show TODO items in current changing files

This is an interesting extension to Magit that shows a TODOs section in your git status buffer containing all lines with TODO (or other similar words) in files contained within the repo.  More information at the [[https://github.com/alphapapa/magit-todos][GitHub repo]].

#+begin_src emacs-lisp

  (use-package magit-todos
    :defer t)

#+end_src

*** diff-hl - [[https://github.com/dgutov/diff-hl][Emacs package for highlighting uncommitted changes]]

#+begin_src emacs-lisp

  (use-package diff-hl
    :hook ((after-init         . global-diff-hl-mode)
           (dired-mode         . diff-hl-dired-mode-unless-remote)
           (magit-pre-refresh  . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh))
    :config
    ;; When Emacs runs in terminal, show the indicators in margin instead.
    (unless (display-graphic-p)
      (diff-hl-margin-mode)))

#+end_src

*** Create URLs for files and commits in GitHub/Bitbucket/GitLab/... repositories

Interactive Emacs functions that create URLs for files and commits in GitHub/Bitbucket/GitLab/... repositories.

~git-link~ returns the URL for the current buffer's file location at the current line number or active region.

~git-link-commit~ returns the URL for the commit at point.

~git-link-homepage~ returns the URL for the repository's homepage.

#+begin_src emacs-lisp

  (use-package git-link
    :commands git-link
    :config
    (setq git-link-open-in-browser t))

#+end_src

** Yafolding - [[https://github.com/zenozeng/yafolding.el][Yet another folding extension for Emacs]]

#+begin_src emacs-lisp

  (use-package yafolding
    :hook ((prog-mode . yafolding-mode)
           (conf-mode . yafolding-mode))
    :bind ("C-<tab>" . yafolding-toggle-element))

#+end_src

** wgrep - [[https://github.com/mhayashi1120/Emacs-wgrep][Writable grep buffer and apply the changes to files]]
#+begin_src emacs-lisp

  (use-package wgrep
    :commands (wgrep-change-to-wgrep-mode))

#+end_src

** MMM

#+begin_src emacs-lisp
(use-package mmm-mode)
#+end_src

** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    (setq projectile-sort-order 'recentf
          projectile-use-git-grep t)

    (projectile-mode +1)
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

#+end_src

** Languages

*** Language Server Support

#+begin_src emacs-lisp

  (use-package lsp-mode
    :ensure t
    :diminish lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (setq lsp-enable-file-watchers nil
          lsp-prefer-flymake nil
          lsp-prefer-capf t
          lsp-rust-clippy-preference "on"

          lsp-rust-analyzer-display-chaining-hints t
          lsp-rust-analyzer-display-parameter-hints t
          lsp-rust-analyzer-server-display-inlay-hints t
          lsp-rust-clippy-preference "on")

    (advice-add 'lsp :before #'direnv-update-environment)

    :hook (;; modes
           (rust-mode . lsp)
           (go-mode . lsp)
           (c-mode . lsp)
           (c++-mode . lsp)
           (nix-mode . lsp)

           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))

    :bind (("C-c e" . lsp-execute-code-action))

    :commands lsp)

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-show-symbol nil
          lsp-ui-sideline-show-hover nil
          lsp-ui-sideline-show-diagnostics nil
          lsp-ui-doc-enable nil
          lsp-ui-doc-position 'bottom
          lsp-ui-sideline-ignore-duplicate t
          lsp-eldoc-render-all nil)
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
    (define-key lsp-ui-mode-map (kbd "C-h") #'lsp-describe-thing-at-point))

#+end_src

*** Debug Adapter Support

#+begin_src emacs-lisp

  (use-package dap-mode
    :custom
    (lsp-enable-dap-auto-configure nil)
    :config
    (dap-ui-mode 1)
    (dap-tooltip-mode 1))

#+end_src

*** BitBake

#+begin_src emacs-lisp

  (use-package bitbake-modes
    :defer t
    :custom-face
    (bitbake-python-function-face ((t (:background "color-19"))))
    (bitbake-python-task-face ((t (:background "color-19"))))
    (bitbake-shell-function-face ((t (:background "color-19")))))

#+end_src

**** References
- https://bitbucket.org/olanilsson/bitbake-modes/src/master/
- http://xemacs.sourceforge.net/Documentation/packages/html/mmm_toc.html#SEC_Contents
- https://github.com/canatella/bitbake-el
*** C/C++

#+begin_src emacs-lisp

  (use-package ccls
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
           (lambda () (require 'ccls) (lsp))))

  (defconst linux-kernel
    '((c-basic-offset . 8)
      (c-label-minimum-indentation . 0)
      (c-offsets-alist . (
                          (arglist-close         . c-lineup-arglist-tabs-only)
                          (arglist-cont-nonempty .
                                                 (c-lineup-gcc-asm-reg c-lineup-arglist-tabs-only))
                          (arglist-intro         . +)
                          (brace-list-intro      . +)
                          (c                     . c-lineup-C-comments)
                          (case-label            . 0)
                          (comment-intro         . c-lineup-comment)
                          (cpp-define-intro      . +)
                          (cpp-macro             . -1000)
                          (cpp-macro-cont        . +)
                          (defun-block-intro     . +)
                          (else-clause           . 0)
                          (func-decl-cont        . +)
                          (inclass               . +)
                          (inher-cont            . c-lineup-multi-inher)
                          (knr-argdecl-intro     . 0)
                          (label                 . -1000)
                          (statement             . 0)
                          (statement-block-intro . +)
                          (statement-case-intro  . +)
                          (statement-cont        . +)
                          (substatement          . +)
                          ))
      (indent-tabs-mode . t)
      (show-trailing-whitespace . t)))
  (c-add-style "linux-kernel" linux-kernel)

#+end_src
*** Device Tree

#+begin_src emacs-lisp

  (use-package dts-mode
    :mode ("\\.dts\\'" "\\.dtsi\\'"))

#+end_src

*** Dockerfile

#+begin_src emacs-lisp

  (use-package dockerfile-mode
    :mode ("/Dockerfile\\'"))

#+end_src

*** Emacs Lisp

#+begin_src emacs-lisp

  (use-package lispy
    :hook ((emacs-lisp-mode . lispy-mode)
           (scheme-mode . lispy-mode)))

  (use-package lispyville
    :hook ((lispy-mode . lispyville-mode))
    :config
    (lispyville-set-key-theme '(operators c-w additional
                                additional-movement slurp/barf-cp
                                prettify)))

  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))

#+end_src

*** Go

#+begin_src emacs-lisp

  (use-package go-mode
    :hook (go-mode . lsp-deferred))

#+end_src

*** HTML

#+begin_src emacs-lisp

  (use-package web-mode
    :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
    :config
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))

  ;; 1. Start the server with `httpd-start'
  ;; 2. Use `impatient-mode' on any buffer
  (use-package impatient-mode)

  (use-package skewer-mode)

#+end_src

*** JSON

#+begin_src emacs-lisp

  (use-package json-mode
    :mode ("\\.uhupkg.config\\'" "\\.json\\'"))

#+end_src

*** Markdown

#+begin_src emacs-lisp

  (use-package markdown-mode
    :mode "\\.md\\'"
    :config
    (setq markdown-command "marked")
    (defun os/set-markdown-header-font-sizes ()
      (dolist (face '((markdown-header-face-1 . 1.2)
                      (markdown-header-face-2 . 1.1)
                      (markdown-header-face-3 . 1.0)
                      (markdown-header-face-4 . 1.0)
                      (markdown-header-face-5 . 1.0)))
        (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

    (defun os/markdown-mode-hook ()
      (os/set-markdown-header-font-sizes))

    (add-hook 'markdown-mode-hook 'os/markdown-mode-hook))

#+end_src

*** Nix

#+begin_src emacs-lisp

  ;; Nix specifics
  (use-package nixpkgs-fmt)
  (use-package nix-mode
    :hook (nix-mode . lsp-deferred)
    :init
    (add-hook 'nix-mode-hook 'nixpkgs-fmt-on-save-mode)
    :config
    (setq nix-nixfmt-bin "nixpkgs-fmt"))

#+end_src

*** Python

#+begin_src emacs-lisp

  ;;; Indentation for python
  (setq electric-indent-functions
        '((lambda (inserted-char)
            (when (eq major-mode 'python-mode)
              ;; Do not auto-indent after inserting any empty line
              (when (save-excursion
                      (previous-line)
                      (beginning-of-line)
                      (looking-at "^\s*$"))
                'no-indent)))))

#+end_src

*** Qt

#+begin_src emacs-lisp

  (use-package qml-mode
    :mode ("\\.qml\\'"))

  (use-package qt-pro-mode
    :mode ("\\.pro\\'" "\\.pri\\'"))

#+end_src

*** Rust

#+begin_src emacs-lisp

  (use-package rust-mode
    :mode "\\.rs\\'")

  (use-package cargo
    :hook (rust-mode . cargo-minor-mode))

#+end_src

*** SystemD

#+begin_src emacs-lisp

  (use-package systemd
    :mode ("\\.automount\\'\\|\\.busname\\'\\|\\.mount\\'\\|\\.service\\'\\|\\.slice\\'\\|\\.socket\\'\\|\\.target\\'\\|\\.timer\\'\\|\\.link\\'\\|\\.netdev\\'\\|\\.network\\'\\|\\.override\\.conf.*\\'" . systemd-mode))

#+end_src

*** Terraform

#+begin_src emacs-lisp

  (use-package terraform-mode)

#+end_src

*** TOML

#+begin_src emacs-lisp

  (use-package toml-mode
    :mode "\\.toml\\'")

#+end_src

*** TypeScript and JavaScript

Configure TypeScript and JavaScript language modes

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 2))

  (defun os/set-js-indentation ()
    (setq js-indent-level 2)
    (setq evil-shift-width js-indent-level)
    (setq-default tab-width 2))

  (use-package js2-mode
    :mode "\\.jsx?\\'"
    :config
    ;; Use js2-mode for Node scripts
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

    ;; Don't use built-in syntax checking
    (setq js2-mode-show-strict-warnings nil)

    ;; Set up proper indentation in JavaScript and JSON files
    (add-hook 'js2-mode-hook #'os/set-js-indentation)
    (add-hook 'json-mode-hook #'os/set-js-indentation))

  ;; (use-package prettier-js
  ;;   :hook ((js2-mode . prettier-js-mode)
  ;;          (typescript-mode . prettier-js-mode))
  ;;   :config
  ;;   (setq prettier-js-show-errors nil))

#+end_src

*** YAML

#+begin_src emacs-lisp

  (use-package yaml-mode
    :mode "\\.ya?ml\\'")

#+end_src

*** Zig

#+begin_src emacs-lisp

  (use-package zig-mode
    :after lsp-mode
    :config
    (require 'lsp)
    (add-to-list 'lsp-language-id-configuration '(zig-mode . "zig"))
    (lsp-register-client
      (make-lsp-client
        :new-connection (lsp-stdio-connection "~/Projects/Code/zls/zig-cache/bin/zls")
        :major-modes '(zig-mode)
        :server-id 'zls)))

#+end_src

** Productivity

*** Syntax checking with Flycheck

#+begin_src emacs-lisp

  (use-package flycheck
    :defer t
    :hook (lsp-mode . flycheck-mode))

#+end_src

*** Snippets

#+begin_src emacs-lisp

  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))

#+end_src

*** Smart Parens

#+begin_src emacs-lisp

  (use-package smartparens
    :hook ((org-mode prog-mode) . smartparens-mode))

#+end_src

*** Rainbow Delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** Rainbow Mode

Sets the background of HTML color strings in buffers to be the color mentioned.

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :defer t
    :hook (org-mode
           emacs-lisp-mode
           web-mode
           typescript-mode
           js2-mode))

#+end_src

*** String Inflection

#+begin_src emacs-lisp

  (use-package string-inflection
    :ensure t
    :bind ("C-M-j" . string-inflection-all-cycle))

#+end_src

*** TRAMP

#+begin_src emacs-lisp

  ;; Set default connection mode to SSH
  (setq tramp-default-method "ssh")

#+end_src

**** Docker support

#+begin_src emacs-lisp

  (use-package docker-tramp
    :after tramp )

#+end_src

*** Browse Kill Ring

#+begin_src emacs-lisp

  (use-package browse-kill-ring
    :bind ("M-y" . browse-kill-ring))

#+end_src

*** Highlight Symbol

#+begin_src emacs-lisp

  (use-package highlight-symbol
    :init
    (global-set-key (kbd "C-c h") 'highlight-symbol)
    (global-set-key (kbd "C-c r h") 'highlight-symbol-query-replace))

#+end_src

*** Spelling

#+begin_src emacs-lisp

  (use-package flyspell
    :diminish flyspell-mode
    :hook
    (text-mode . flyspell-mode)
    (org-mode . flyspell-mode)
    (prog-mode . flyspell-prog-mode))

#+end_src

*** Allow answering ~y~ or ~n~ for ~yes~  or ~no~ questions

#+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)

#+end_src

*** Don't confirm to kill Emacs

#+begin_src emacs-lisp

  (setq confirm-kill-emacs nil)

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

* Extra Functions

#+begin_src emacs-lisp

  (defun os/copy-buffer-name ()
    (interactive)
    (kill-new (buffer-name)))

  (defun os/copy-buffer-full-name ()
    (interactive)
    (kill-new (buffer-file-name)))

#+end_src

* Inspiration

[[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]] has a good list of packages and themes to check out.

Other dotfiles repos and blog posts for inspiration:

- [[https://github.com/daviwil/dotfiles][David Wilson's dotfiles]]
- [[https://github.com/howardabrams/dot-files][Howard Abrams' dotfiles]]
- [[https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org][UncleDave's Emacs config]]
- [[https://github.com/dakrone/dakrone-dotfiles][dakrone's dotfiles]]
- [[https://github.com/jinnovation/dotemacs][jinnovation dotemacs]]
- [[https://writequit.org/org/][writequit's config]]
